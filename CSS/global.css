@charset "UTF-8";

:root {
    /* Color definitions */
    --dark: #090515;
    --light: #EAE8F1;
    --accent: #667fcc;
    --accentLight: #8c9fd9;
    --accentDark: #5f73ad;
    --emp1: #EEC857;
    --emp2: #E34764;

    /* Transparency definitions */
    --darkRGBA: rgba(9, 5, 21, 0);
    --accentRGBA: rgba(102, 127, 204, 0);

    /* Composition settings */
    --contentWidth: 65vw;
    --sidebarWidth: calc(calc(100vw - var(--contentWidth))/2);
    --overScroll: 20vh;
    --contentHorizontalPadding: 3%;
    --paragraphSpacing: 5px;
    --navFontSize: 16px;
    --navItemSpacing: 6px;
    --navVerticalPadding: 2px;
    --dropdownOffset: calc(calc(var(--navVerticalPadding)*2 + var(--navFontSize) + var(--navItemSpacing)*2)*-1);
    --dropdownHovGuideWidth: 50%;
    --dropdownHovGuideHeight: 20px;
    --dropdownHovGuideVOffset: 5px;
    --dropdownHovGuideRotation: 5deg;
    --imageWidth: calc(var(--sidebarWidth)*0.9);
    --imageHOffset: calc(var(--sidebarWidth)*0.05);

    /* Style settings */
    --borderRadius: 5px;
    --borderWidth: 2px;
    --navGradientSize: 25vh;
    --animationTime: 0.1s;
}

body {
    background-color: var(--dark);
    color: var(--light);
    margin: 0;
    font-family: "Noto Sans Mono", monospace;
    font-optical-sizing: auto;
    font-weight: 500;
    font-style: normal;
}

p {
    padding: var(--paragraphSpacing) 0;
}

.image {
    position: absolute;
    right: 0;
    width: var(--sidebarWidth);
}

img {
    position: relative;
    width: calc(var(--sidebarWidth)*0.9);
    left: var(--imageHOffset);
}

.header {
    position: fixed;
    height: 100%;
    width: var(--sidebarWidth);
    border-right: var(--borderWidth) solid var(--accent);
    background-color: var(--dark);
    background-blend-mode: difference;
}

.navigation {
    list-style-type: none;
    padding: 0;
    background-color: var(--dark);
    z-index: 10;
}

.navigation a {
    font-size: var(--navFontSize);
    width: 90%;
    margin: 0 5% var(--navItemSpacing) 5%;
    display: inline-block;
    box-sizing: border-box;
    text-decoration: none;
    padding: var(--navVerticalPadding) 6px;
    background-color: var(--accentLight);
    box-shadow: 0 0 var(--accentLight), 0 0 var(--accentLight);
    color: var(--dark);
    transition: var(--animationTime);
    /* Dropdown animations set element width to zero, so we need to make it behave properly when that happens */
    white-space: nowrap;
    overflow: hidden;
    vertical-align: top;
}

.navigation a:hover {
    background-color: var(--accent);
    box-shadow: 2px 0 var(--accentLight), -2px 0 var(--accentLight);
}

/* ul needs to be absolute so the dropdown does not displace other elements */
li.dropdown>ul {
    position: absolute;
    left: 100%;
    width: 100%;
    background: none;
    width: 0;
    transition: var(--animationTime);
}

/* Some unorthodox positioning is needed list items since the parent element is offset and cannot be easily fixed */
li.dropdown>ul>li {
    position: relative;
    top: var(--dropdownOffset);
    background-color: var(--dark);
    border-right: 0 solid var(--accent);
    border-left: 0 solid var(--accent);
    transition: var(--animationTime);
}

/* Generous vertical hover hitboxes that also function as a neat shading effect */
li.dropdown>ul.navigation>li:first-child:before, li.dropdown>ul.navigation>li:last-child::after{
    content: "";
    display: block;
    position: absolute;
    left: 0;
    width: 100%;
    height: var(--navGradientSize);
    border-width: 0;
    border-style: solid;
    border-top: 0;
    border-bottom: 0;
    transition: var(--animationTime);
}

li.dropdown>ul.navigation>li:first-child:before {
    top: calc(var(--navGradientSize)*-1);
    background-image: linear-gradient(var(--darkRGBA), var(--dark));
    border-image: linear-gradient(var(--accentRGBA), var(--accent)) 1;
}

li.dropdown>ul.navigation>li:last-child::after {
    bottom: calc(var(--navGradientSize)*-1);
    background-image: linear-gradient(var(--dark), var(--darkRGBA));
    border-image: linear-gradient(var(--accent), var(--accentRGBA)) 1;
}

li.dropdown>ul>li>a {
    padding: var(--navVerticalPadding) 0;
}

/* This is a bit experimental; the hovGuide is a strategically positioned element that aims to reduce accidental de-hovers. */
li.dropdown:hover>a::after {
    content: "";
    display: block;
    position: absolute;
    right: -1px;
    width: var(--dropdownHovGuideWidth);
    height: var(--dropdownHovGuideHeight);
    rotate: var(--dropdownHovGuideRotation);
}

li.dropdown:hover>ul>li {
    border-width: var(--borderWidth);
}

li.dropdown:hover>ul>li>a {
    padding: var(--navVerticalPadding) 6px;
}

li.dropdown:hover>ul {
    width: 100%;
}

li.dropdown:hover>ul.navigation>li:last-child::after, li.dropdown:hover>ul.navigation>li:first-child::before {
    border-width: var(--borderWidth);
    left: calc(var(--borderWidth)*-1);
}

.content {
    width: calc(var(--contentWidth) - (var(--contentHorizontalPadding) * 2));
    margin-left: var(--sidebarWidth);
    border-right: var(--borderWidth) solid var(--accent);
    padding: var(--overScroll) var(--contentHorizontalPadding);
}

@media (max-width: 800px) {
    /* TODO: fix mobile navbar */
    :root {
        --overScroll: 5vh;
        --contentHorizontalPadding: 2%;
        --contentWidth: 95%;
        --sidebarWidth: calc((100% - var(--contentWidth)));
    }

    .header {
        width: var(--sidebarWidth);
        position: absolute;
        overflow: hidden;
        transition: var(--animationTime) ease-in-out;
    }

    .navigation {
        width: 40vw;
        position: fixed;
    }

    .header:hover {
        width: 50%;
    }

    .content {
        margin-left: var(--sidebarWidth);
        width: calc(var(--contentWidth) - (var(--contentHorizontalPadding) * 2) - calc((100% - var(--contentWidth))));
    }
}